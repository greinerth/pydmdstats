[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pydmdstats"
version = "0.1.0"
requires-python = ">=3.8, <3.13"
description = "VarProDMD stats vs BOPDMD"
license = {file="LICENSE"}
authors = [
  { name = "Gerhard Reinerth", email = "g.reinerth@tum.de" }
]


readme = "README.md"
keywords = ["python", "dynamic mode decomposition", "variable projection"]

classifiers = [
        "Intended Audience :: Science/Research",
        "Topic :: Scientific/Engineering",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12"
]
dependencies = [
    "numpy>=1.21.4",
    "scipy>=1.9.3",
    "sympy>=1.8",
    "pydmd",
    "scikit-image",
    "seaborn",
    "netCDF4",
    "colorama",
    "wget",
    "SciencePlots"
]

[tool.hatch.build]
include = [
  "varprodmdstatspy"
]

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
  "nox"
]

dev = ["anybadge",
       "ruff",
       "pytest",
       "pytest-coverage",
       "pytest-mypy",
       "hatchling",
       "nox",
       "pre-commit",
       "memray"]

docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[tool.coverage]
run.source = ["varprodmdstatspy"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["varprodmdstatspy", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "varprodmdstatspy.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["varprodmdstatspy"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["varprodmdstatspy._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]

[project.scripts]
run_ssim = "varprodmdstatspy.varprodmd_ssim_performance:run_ssim"
run_mrse = "varprodmdstatspy.varprodmd_mrse_performance:run_mrse"
visualize_stats = "varprodmdstatspy.visualize_results:visualize_stats"
